{
  "compilerOptions": {
    /* Language and Environment */
    "target": "esnext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */

    /* Modules */
    "module": "commonjs",                               /* Specify what module code is generated. */
    "resolveJsonModule": true,                          /* Enable importing .json files. */

    /* JavaScript Support */
    "allowJs": true,                                    /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    "checkJs": false,                                   /* Enable error reporting in type-checked JavaScript files. */

    /* Emit */
    "outDir": "./.output",                              /* Specify an output folder for all emitted files. */
    "newLine": "crlf",                                  /* Set the newline character for emitting files. */

    /* Interop Constraints */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                     /* Enable all strict type-checking options. */
    "strictNullChecks": true,                           /* When type checking, take into account 'null' and 'undefined'. */
    "strictFunctionTypes": true,                        /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "noUnusedLocals": true,                             /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                         /* Raise an error when a function parameter isn't read. */
    "noImplicitReturns": true,                          /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noFallthroughCasesInSwitch": true,                 /* Enable error reporting for fallthrough cases in switch statements. */
    "noUncheckedIndexedAccess": true,                   /* Add 'undefined' to a type when accessed using an index. */

    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["src", "tests"],
  "exclude": ["node_modules"]
}
